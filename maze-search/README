A description of the module is given in the docstrings. This file provides 
information on customizing some of the module functionality. The program 
can be run under default settings on the supplied maze layout as shown 
below.

    Example:s

        $ python MazeSearch.py maps/map0.txt

The actions allowed allowed within a maze are determined when the Maze 
object is created. By default, all actions in the global set MAZE_ACTS 
are allowed. When creating the Maze object though, a set of actions can
be specified. Additionally, the Maze object keeps a function pointer
heuristicFunc to a function used to compute a heuristic between cells in
the maze. By default, this is the zero function, but any function can be
supplied in the constructor.

    Example:
        
        maze = Maze('map.txt', actions={'N','S','W'}, h=manhattanDist);
    
This creates a maze in which only up, down, and left moves are allowed and
the heuristic is the Manhattan distance function.

The character encoding for a maze layout (read from the input file) is
determined by the global dictionary MAZE_DEFS; changing the values will
determine how the maze parser interprets a map file.

Successor cells are generated by the Maze.getSuccessors function by 
iterating over the allowed actions and finding the resulting cells. This 
function can be modified to change the state transitions. The cost 
associated with a given transition is defined in the Maze.transitionCost 
function. This function can be modified to change transition costs.

The search function performs any of the following searches: A*, breadth-
first, depth-first, and uniform cost search. Most of the search code is 
the same, regardless of type, so this function was written to be general 
enough for any search. The search function selects the search algorithm 
according to the searchType parameter, which can be: 'A*', 'BFS', 'DFS',
or 'UCS'. 

    Example:
        
        solution, nodes = search(maze, searchType='DFS');

